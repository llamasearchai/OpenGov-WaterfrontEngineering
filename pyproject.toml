[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "opengov-waterfrontengineering"
version = "0.1.0"
description = "OpenGov-WaterfrontEngineering: Marine/waterfront screening toolkit (CA/IN/OH)."
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Nik Jois", email = "nikjois@llamasearch.ai" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Environment :: Console",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "numpy>=1.26.4",
    "pandas>=2.2.2",
    "typer>=0.12.3",
    "rich>=13.7.1",
    "fastapi>=0.115.0",
    "uvicorn>=0.31.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.5.0",
    "httpx>=0.27.0",
    "openai>=1.50.0",
    "python-dotenv>=1.0.0",
]

[project.scripts]
opengov-waterfront = "open_gov_waterfront.cli:app"
opengov-waterfront-server = "open_gov_waterfront.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/open_gov_waterfront"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.6.9",
    "mypy>=1.11.2",
]

[tool.hatch.envs.default.scripts]
test = "pytest -v"
cov = "pytest --cov=open_gov_waterfront --cov-report=term-missing --cov-report=html"
lint = "ruff check ."
format = "ruff format ."
typecheck = "mypy src"
all = ["format", "lint", "typecheck", "test"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
check_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "raise RuntimeError",
    "raise NotImplementedError",
]
